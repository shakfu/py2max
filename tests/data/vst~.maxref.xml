<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This is an automatically generated file. DO NOT EDIT THIS FILE DIRECTLY. Rather, use the _ref.xml files found in the 'edits' folder.-->
<c74object name="vst~" module="msp" category="MSP Plug-ins">
	<digest>
		Host VST, VST3 and Audio Unit plug-ins
	</digest>
	<description>
		Use the <o>vst~</o> object to load a real-time VST, VST3 or Audio Unit plug-in and use its audio processing in MSP. When <o>vst~</o> is instantiated as <o>mcs.vst~</o>, the plug-in's audio inputs are combined into a single multichannel inlet and its audio outputs are combined into a single multichannel outlet.
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Cycling '74
		</metadata>
		<metadata name="tag">
			MSP
		</metadata>
		<metadata name="tag">
			MSP Plug-ins
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Audio/Control Input
			</digest>
			<description>
				TEXT_HERE
			</description>
		</inlet>
		<inlet id="1" type="signal">
			<digest>
				Audio Input 2
			</digest>
			<description>
				TEXT_HERE
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="signal">
			<digest>
				Audio Output 1
			</digest>
			<description>
				TEXT_HERE
			</description>
		</outlet>
		<outlet id="1" type="signal">
			<digest>
				Audio Output 2
			</digest>
			<description>
				TEXT_HERE
			</description>
		</outlet>
		<outlet id="2" type="signal">
			<digest>
				Parameter Names
			</digest>
			<description>
				TEXT_HERE
			</description>
		</outlet>
		<outlet id="3" type="signal">
			<digest>
				Parameter Index and Value When Changed
			</digest>
			<description>
				TEXT_HERE
			</description>
		</outlet>
		<outlet id="4" type="signal">
			<digest>
				Plug-in Generated MIDI Events
			</digest>
			<description>
				TEXT_HERE
			</description>
		</outlet>
		<outlet id="5" type="signal">
			<digest>
				Program Names
			</digest>
			<description>
				TEXT_HERE
			</description>
		</outlet>
		<outlet id="6" type="signal">
			<digest>
				Subnames (VST Shell Plug-ins Only)
			</digest>
			<description>
				TEXT_HERE
			</description>
		</outlet>
		<outlet id="7" type="signal">
			<digest>
				Preset Names (Audio Unit Plug-ins Only)
			</digest>
			<description>
				TEXT_HERE
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="number-of-inputs/outputs" optional="1" type="int">
			<digest>
				Number of inputs/outputs
			</digest>
			<description>
				If the first or first and second arguments are numbers, they set the number of audio inputs and outputs. If there is only one number, it sets the number of outlets. If there are two numbers, the first one sets the number of inlets and the second sets the number of outlets.
			</description>
		</objarg>
		<objarg name="VST-plugin-filename" optional="1" type="symbol">
			<digest>
				Plug-in filename
			</digest>
			<description>
				Sets the name of a VST or Audio Unit plug-in file to load when the object is created. You can load a plug-in after the object is created (or replace the one currently in use) with the <m>plug</m> message.
			</description>
		</objarg>
		<objarg name="preset-effects-name" optional="1" type="symbol">
			<digest>
				Preset name
			</digest>
			<description>
				After the plug-in name, a name containing preset effects for the plug-in can be specified. If found, it will be loaded after the plug-in has been loaded.
			</description>
		</objarg>
	</objarglist>
	<!--parameter-->
	<parameter />
	<!--MESSAGES-->
	<methodlist>
		<method name="int">
			<arglist>
				<arg name="effect-program" optional="0" type="int" />
			</arglist>
			<digest>
				Change the plug-in preset
			</digest>
			<description>
				In left inlet: Changes the effect program of the currently loaded plug-in. The first program is number 1.
			</description>
		</method>
		<method name="float">
			<arglist>
				<arg name="effect-program" optional="0" type="float" />
			</arglist>
			<digest>
				Change the plug-in preset
			</digest>
			<description>
				In left inlet: Floating point values are converted to <m>int</m> values and used to change the effect program of the currently loaded plug-in. The first program is number 1.
			</description>
		</method>
		<method name="list">
			<arglist>
				<arg name="plugin-parameter" optional="0" type="symbol" />
				<arg name="setting" optional="0" type="float" />
			</arglist>
			<digest>
				Change a parameter value in the currently loaded plug-in
			</digest>
			<description>
				In left inlet: Changes a parameter value in the currently loaded plug-in. The first list element is the parameter number (starting at 1) and the second element is the parameter value. The second number should be a float between 0 and 1, where 0 is the minimum value of the parameter and 1 is the maximum.
			</description>
		</method>
		<method name="anything">
			<arglist>
				<arg name="plugin-parameter" optional="0" type="symbol" />
				<arg name="setting" optional="0" type="float" />
			</arglist>
			<digest>
				Set the value of a parameter
			</digest>
			<description>
				A symbol that names a plug-in parameter followed by a float between 0 and 1 set the value of the parameter.
			</description>
		</method>
		<method name="(drag)">
			<digest>
				Click and drag to load a plug-in
			</digest>
			<description>
				When a plug-in file is dragged from the file browser to a <o>vst~</o> object, the plug-in will be loaded.
			</description>
		</method>
		<method name="(mouse)">
			<digest>
				Double-click to open the plug-in's edit window
			</digest>
			<description>
				Double-clicking on a <o>vst~</o> object opens the plug-in's edit window.
			</description>
		</method>
		<method name="disable">
			<arglist>
				<arg name="mute-flag (0 or nonzero)" optional="0" type="int" />
			</arglist>
			<digest>
				Stop plug-in processing and output a zero signal
			</digest>
			<description>
				The word <m>disable</m>, followed by a non-zero argument, stops any further processing by the currently loaded plug-in and outputs a zero signal. <m>disable 0</m> enables processing for the plug-in.
			</description>
		</method>
		<method name="drop">
			<arglist />
			<digest>
				Unload the currently loaded plugin.
			</digest>
			<description>
				Unload the currently loaded plugin.
			</description>
		</method>
		<method name="get">
			<arglist>
				<arg name="parameter-data-query-index or parameter-name" optional="0" type="int or symbol" />
			</arglist>
			<digest>
				Report parameter values and plug-in information
			</digest>
			<description>
				The word <m>get</m>, followed by a number or symbol argument, reports parameter values and plug-in information. This is output from the fifth-from-right outlet of <o>vst~</o> as a list with the query index (or plug-in info index) as the first element and the desired information as the second element.
				<br />
				<br />
				If a symbol argument is provided, and the symbol corresponds to the name of a parameter, the <m>get</m> message outputs the current parameter value (a float between 0 and 1) of the named parameter. Otherwise, nothing is output.
				<br />
				<br />
				If a number argument is provided, and the number argument is between 1 and the number of parameters of the currently loaded plug-in (inclusive), the <m>get</m> message outputs the current parameter value (a float between 0 and 1) of the numbered parameter. If the argument is 0 nothing is output.
				<br />
				<br />
				If a negative number argument is provided, the <m>get</m> message outputs a list with the first element specifying the number argument and the remaining elements specifying the following information:
				<br />
				<br />
				<m>get -1</m> the plug-in's number of inputs
				<br />
				<m>get -2</m> the plug-in's number of outputs
				<br />
				<m>get -3</m> the plug-in's number of programs (VST) or factory presets (Audio Unit)
				<br />
				<m>get -4</m> the plug-in's number of parameters
				<br />
				<m>get -5</m> whether the plug-in's canMono flag is set. This indicates that the plug-in can be used in either a stereo or mono context
				<br />
				<m>get -6</m> 1 if the plug-in has its own edit window, 0 if it doesn't
				<br />
				<m>get -7</m> 1 if the plug-in is a synth plug-in, 0 if it isn't
				<br />
				<m>get -8</m> the unique ID of the plug-in as an integer value
				<br />
				<m>get -9</m> four integer values representing the left, top, right, and bottom coordinates of the desired rectangle of the plug-in UI edit window
				<br />
				<m>get -10</m> an integer value representing the initial delay of the plug-in in samples to allow you to automatically compensate for the plugin's latency in your patch
				<br />
				<m>get -11</m> the plug-in's number of user preset files (Audio Unit only)
			</description>
		</method>
		<method name="getsubnames">
			<arglist />
			<digest>
				Report a list of sub plug-in names when hosting a VST shell plug-in
			</digest>
			<description>
				In left inlet: When using the <o>vst~</o> object to host a VST shell plug-in (e.g., WaveShell) that is not instantiated with a specific plug-in name, the word <m>getsubnames</m> causes a list of sub plug-in names to be sent out the second-from-right outlet of the <o>vst~</o> object.
			</description>
		</method>
		<method name="midievent">
			<arglist>
				<arg name="MIDI-message (2 to 4 numbers)" optional="0" type="list" />
			</arglist>
			<digest>
				Send a MIDI event to the plug-in
			</digest>
			<description>
				The word <m>midievent</m>, followed by two to four numbers, sends a MIDI event to the plug-in. The first three number arguments are the bytes of the MIDI message. The fourth, optional, argument is a detune parameter used for MIDI note messages. The value ranges from -63 to 64 cents, with 0 being the default.
			</description>
			<attributelist>
				<attribute name="audiothread" get="1" set="1" type="int" size="1" value="1" />
			</attributelist>
		</method>
		<method name="mpeevent">
			<arglist>
				<arg name="MPE-messages" type="list" optional="0" />
			</arglist>
			<digest>
				Send MPE messages
			</digest>
			<description>
				Send MPE messages to the hosted VST, VST3, or Audio Unit plug-in.
			</description>
		</method>
		<method name="open">
			<arglist>
				<arg name="window-coordinates" optional="0" type="list" />
			</arglist>
			<digest>
				Open the plug-in edit window
			</digest>
			<description>
				The word <m>open</m> with no arguments opens the plug-in's edit window. If the window was previously opened then the edit window location will persist. The word <m>open</m> followed by two integer values specifying the left and top window coordinates respectively will open or move the plug-in's edit window to the given coordinates.
			</description>
		</method>
		<method name="params">
			<arglist />
			<digest>
				Print a list of the plug-in's parameters
			</digest>
			<description>
				The word <m>params</m> causes a list of the plug-in's parameters to be sent out the sixth-from-right outlet.
			</description>
		</method>
		<method name="pgmnames">
			<arglist />
			<digest>
				Output a list of the plug-in's program names
			</digest>
			<description>
				The word <m>pgmnames</m> causes a list of the plug-in's current program names to be sent out the right outlet.
			</description>
		</method>
		<method name="plug">
			<arglist>
				<arg name="plug-in-name" optional="0" type="symbol" />
			</arglist>
			<digest>
				Load a plug-in
			</digest>
			<description>
				In left inlet: The word <m>plug</m> with no arguments opens a standard open file dialog allowing you to choose a new VST or Audio Unit plug-in to host. The word <m>plug</m> followed by a symbol argument searches for plug-in with the specified name in the Max search path. If a new plug-in is opened and found, the old plug-in (if any) is discarded and the new one loaded. An optional second argument to the <m>plug</m> message can be used to specify a plug-in name within a shell plug-in (e.g., WaveShell). This can either be a symbolic plug-in name or an associated ID value as displayed by the <m>printids</m> message).
				<br />
				<br />
				For mc.vst~, if the attribute @mcisolate is set to 1, sending a plug message will allow the user to load a VST for each instance individually. When @mcisolate is set to 0, any plug message received loads that plug-in to all instances.
				<br />
				<br />
				When the Max application starts up, the system VST folder will be added to the max search path. On the Macintosh this is generally /Library/Audio/Plug-ins/VST/ and on windows this is the folder specified in the VSTPluginsPath string value under the registry key HKLM\Software\VST. On Mac OS, Audio Unit plug-ins will be scanned and .auinfo files for Apple built-in and user-installed plug-ins will be added to the search path.
			</description>
		</method>
		<method name="plug_au">
			<arglist>
				<arg name="filename" type="list" optional="0" />
			</arglist>
			<digest>
				Load AU plug-in.
			</digest>
			<description>
				Attempt to load an AudioUnit plug-in by name. Equivalent to <m>plug C74_AU:/&lt;plug-in name&gt;</m>.
			</description>
		</method>
		<method name="plug_vst">
			<arglist>
				<arg name="filename" type="list" optional="0" />
			</arglist>
			<digest>
				Load VST plug-in.
			</digest>
			<description>
				Attempt to load a VST plug-in by name. Equivalent to <m>plug C74_VST:/&lt;plug-in name&gt;</m>.
			</description>
		</method>
		<method name="plug_vst3">
			<arglist>
				<arg name="filename" type="list" optional="0" />
			</arglist>
			<digest>
				Load VST3 plug-in.
			</digest>
			<description>
				Attempt to load a VST3 plug-in by name. Equivalent to <m>plug C74_VST3:/&lt;plug-in name&gt;</m>.
			</description>
		</method>
		<method name="presetnames">
			<arglist />
			<digest>
				Output a list of the plug-in's user preset filenames
			</digest>
			<description>
				For Audio Unit plug-ins only, the word <m>presetnames</m> causes a list of the plug-in's user preset filenames to be sent out the right outlet.
			</description>
		</method>
		<method name="printids">
			<arglist />
			<digest>
				Print a list of sub plug-in IDs for a VST shell plug-in to the Max Console
			</digest>
			<description>
				In left inlet: When using the <o>vst~</o> object to host a VST shell plug-in (e.g., WaveShell) that is not instantiated with a specific plug-in name, the word <m>printids</m> causes a list of sub plug-in IDs to be displayed in the Max Console.
			</description>
		</method>
		<method name="read">
			<arglist>
				<arg name="filename" optional="0" type="symbol" />
			</arglist>
			<digest>
				Read an effect program in bank or individual program format
			</digest>
			<description>
				With no arguments, <m>read</m> opens a standard open file dialog prompting for a file of effect programs, either in bank or individual program format. <m>read</m> accepts an optional symbol argument where it looks for a VST plug-in bank or effect program file in the Max search path.
			</description>
		</method>
		<method name="scan">
			<arglist>
				<arg name="scan type" type="int" optional="1" />
			</arglist>
			<digest>
				Re-scan for new plug-ins.
			</digest>
			<description>
				Re-scan the system VST folders for new plug-ins. On the Macintosh this is generally /Library/Audio/Plug-ins/VST/ and on windows this is the folder specified in the VSTPluginsPath string value under the registry key HKLM\Software\VST. On Mac OS, Audio Unit plug-ins will be scanned and .auinfo files for Apple built-in and user-installed plug-ins will be added to the search path. The optional arguments 0, 1, 2, or 3, set the scan type to 0=default, 1=partial, 2=full, and 3=reset.
			</description>
		</method>
		<method name="set">
			<arglist>
				<arg name="effect-program-name" optional="0" type="symbol" />
			</arglist>
			<digest>
				Change the name of the current effect program
			</digest>
			<description>
				In left inlet: The word <m>set</m>, followed by a symbol, changes the name of the current effect program to the symbol.
			</description>
		</method>
		<method name="signal">
			<arglist />
			<digest>
				Input to be processed by the plug-in
			</digest>
			<description>
				Input to be processed by the plug-in. If the plug-in is an instrument plug-in, the input will be ignored.
			</description>
		</method>
		<method name="subname">
			<arglist>
				<arg name="plug-in-name" optional="0" type="symbol" />
			</arglist>
			<digest>
				Load a shell VST plug-in
			</digest>
			<description>
				In left inlet: The word <m>subname</m>, followed by a plug-in name or plug-in ID, will cause a shell VST plug-in (e.g., WaveShell) to be re-instantiated with the specified name/ID.
			</description>
		</method>
		<method name="sysexevent">
			<arglist>
				<arg name="sample-offset" type="int" optional="1" />
				<arg name="sysex-bytes" type="list" optional="0" />
			</arglist>
			<digest>
				Send a system exclusive message to a plugin.
			</digest>
			<description>
				The word <m>sysexevent</m>, followed by a sequence of numbers, sends a sysex message to the plug-in. The message should be complete and properly formatted (e.g. with a header <m>0xF0</m> ( <m>240</m>) byte and a trailing <m>0xF7</m> ( <m>247</m>) byte). If the first number in the list is <i>not</i>  <m>0xF0</m> ( <m>240</m>), it will be interpreted as a sample offset for the message.
			</description>
			<attributelist>
				<attribute name="audiothread" get="1" set="1" type="int" size="1" value="1" />
			</attributelist>
		</method>
		<method name="unplug">
			<arglist />
			<digest>
				Unload the currently loaded plugin.
			</digest>
			<description>
				Unload the currently loaded plugin.
			</description>
		</method>
		<method name="wclose">
			<arglist />
			<digest>
				Close the plug-in edit window
			</digest>
			<description>
				Closes the plug-in's edit window.
			</description>
		</method>
		<method name="write">
			<arglist>
				<arg name="file/pathname" optional="0" type="symbol" />
			</arglist>
			<digest>
				Write an effect program file
			</digest>
			<description>
				For VST plug-ins, with no arguments, <m>write</m> opens a standard Save As dialog box prompting you to choose the name and type of the effect program file (single program or bank). <m>write</m> accepts an optional symbol argument that specifies a full or partial destination pathname. An individual program file is written in this case. For Audio Unit plug-ins, the filename argument is required, and specifies the name of a user preset that will be written to a standard plug-in user preset location.
			</description>
		</method>
		<method name="writebank">
			<arglist>
				<arg name="program-bank-file/pathname" optional="0" type="symbol" />
			</arglist>
			<digest>
				Write an effect program bank file
			</digest>
			<description>
				With no arguments, <m>writebank</m> opens a standard Save As dialog box prompting you to choose the name of the effect program bank file. <m>writebank</m> accepts an optional symbol argument that specifies a full or partial destination pathname. For Audio Unit plug-ins, the <m>writebank</m> message is the same as <m>write</m> and saves only the current settings to a named file.
			</description>
		</method>
		<method name="writepgm">
			<arglist>
				<arg name="inividual-effect-program-file/pathname" optional="0" type="symbol" />
			</arglist>
			<digest>
				Write an individual effect program file
			</digest>
			<description>
				With no arguments, <m>writepgm</m> opens a standard Save As dialog box prompting you to choose the name of the individual effect program file. <m>writepgm</m> accepts an optional symbol argument that specifies a full or partial destination pathname. For Audio Unit plug-ins, the <m>writepgm</m> message is the same as <m>write</m> and saves the current settings to a named file.
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="autosave" get="1" set="1" type="int" size="1">
			<digest>
				Autosave Snapshot
			</digest>
			<description>
				TEXT_HERE
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Snapshot" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="documented" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Autosave Snapshot" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="bypass" get="1" set="1" type="int" size="1">
			<digest>
				Bypass
			</digest>
			<description>
				Bypasses plug-in processing and passes all audio through the <o>vst~</o> object.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="atom" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Bypass" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="currentplug" get="1" set="0" type="atom" size="1">
			<digest>
				Currently Loaded Plugin
			</digest>
			<description>
				TEXT_HERE
			</description>
			<attributelist>
				<attribute name="basic" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="category" get="1" set="1" type="atom" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Currently Loaded Plugin" />
			</attributelist>
		</attribute>
		<attribute name="enablehscroll" get="1" set="1" type="int" size="1">
			<digest>
				Enable Horizontal Scrollbar
			</digest>
			<description>
				TEXT_HERE
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="atom" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="introduced" get="1" set="1" type="symbol" size="1" value="7.0.0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Enable Horizontal Scrollbar" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="enablevscroll" get="1" set="1" type="int" size="1">
			<digest>
				Enable Vertical Scrollbar
			</digest>
			<description>
				TEXT_HERE
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="atom" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="introduced" get="1" set="1" type="symbol" size="1" value="7.0.0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Enable Vertical Scrollbar" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="floateditorwindow" get="1" set="1" type="int" size="1">
			<digest>
				Float Editor Window
			</digest>
			<description>
				TEXT_HERE
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="atom" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Float Editor Window" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="genericeditor" get="1" set="1" type="int" size="1">
			<digest>
				Use Generic Editor
			</digest>
			<description>
				Use a generic editor interface for a plug-in. Note that some Audio Unit plug-ins will not show generic interfaces.
			</description>
			<attributelist>
				<attribute name="basic" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="category" get="1" set="1" type="atom" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="introduced" get="1" set="1" type="symbol" size="1" value="7.0.0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Always Use Generic Editor" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="legacytransport" get="1" set="1" type="int" size="1">
			<digest>
				Legacy Transport Mode
			</digest>
			<description>
				Previous versions of Max did not correctly link the Max transport with plug-ins' internal transport. If existing patchers require the old behavior for proper operation, this attribute can be enabled for backward compatibility. The new behavior (attribute disabled) is generally preferable.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="atom" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Legacy Transport Mode" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="mcisolate" get="1" set="1" type="int" size="1">
			<digest>
				Isolate Parameter Changes
			</digest>
			<description>
				Isolate parameter changes to a specified channel.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="atom" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Isolate Parameter Changes" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="parameter_enable" get="1" set="1" type="int" size="1">
			<digest>
				Enable parameter mode
			</digest>
			<description>
				Enables use of this object with <link type="userguide" name="m4l/live_parameters">Max for Live Parameters</link> and <link type="userguide" name="parameter_mode">setting initial parameter values</link> in Max.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="atom" size="1" value="Parameter" />
				<attribute name="introduced" get="1" set="1" type="symbol" size="1" value="7.0.0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Parameter Mode Enable" />
				<attribute name="order" get="1" set="1" type="int" size="1" value="5" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="prefer" get="1" set="1" type="symbol" size="1">
			<digest>
				Preferred Plug-in Format
			</digest>
			<description>
				In the absence of other information, such as an absolute path to a plug-in file or an explicit typed plug-in path (e.g. <m>C74_VST:/[pluginname]</m>, <m>C74_VST3:/[pluginname]</m>, or <m>C74_AU:/[pluginname]</m> on OSX), the <at>prefer</at> attribute will be used to preferentially load one type of plug-in before other available formats when using the <m>plug</m> message. Note that the variations <m>plug_vst</m>, <m>plug_vst3</m>, and <m>plug_au</m> can also be used to override the specified preference.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="atom" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="VST" />
				<attribute name="enumvals" get="1" set="1" type="atom" size="3">
					<enumlist>
						<enum name="VST">
							<digest>
								TEXT_HERE
							</digest>
							<description>
								TEXT_HERE
							</description>
						</enum>
						<enum name="VST3">
							<digest>
								TEXT_HERE
							</digest>
							<description>
								TEXT_HERE
							</description>
						</enum>
						<enum name="AudioUnit">
							<digest>
								TEXT_HERE
							</digest>
							<description>
								TEXT_HERE
							</description>
						</enum>
					</enumlist>
				</attribute>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Preferred Plug-in Format" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enum" />
			</attributelist>
		</attribute>
		<attribute name="transport" get="1" set="1" type="symbol" size="1">
			<digest>
				Transport Name
			</digest>
			<description>
				Sets the transport name. By default, this is unset, and the <o>vst~</o> object will use the default transport (the Global Transport in Max, Live's transport in Max for Live). Setting this enables sync to <link type="userguide" name="transport">user-defined transports and clock sources</link>.
			</description>
			<attributelist>
				<attribute name="basic" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="category" get="1" set="1" type="atom" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Transport Name" />
			</attributelist>
		</attribute>
		<attribute name="valuemode" get="1" set="1" type="int" size="1">
			<digest>
				Parameter Value Output Format
			</digest>
			<description>
				Determines the output at the <o>vst~</o> object's fifth-from-right outlet. In Value mode (the default: 0), the object will send the parameter's index followed by a floating-point value between 0. and 1. (e.g. <m>2 0.25</m>). In String mode (1), the object will send the parameter's index followed by a symbol value (e.g. <m>2 -6dB</m>). In Both mode (2), the object will send the parameter's index followed by a floating-point value and a symbol value (e.g. <m>2 0.25 -6dB</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="atom" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="enumvals" get="1" set="1" type="atom" size="3">
					<enumlist>
						<enum name="Value">
							<digest>
								Output parameter's normalized value (0. - 1.)
							</digest>
							<description>
								TEXT_HERE
							</description>
						</enum>
						<enum name="String">
							<digest>
								Output parameter's symbolic value
							</digest>
							<description>
								TEXT_HERE
							</description>
						</enum>
						<enum name="Both">
							<digest>
								Output parameter's normalized value followed by the symbolic value
							</digest>
							<description>
								TEXT_HERE
							</description>
						</enum>
					</enumlist>
				</attribute>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Parameter Value Output Format" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
	</attributelist>
	<snapshot />
	<!--EXAMPLE-->
	<examplelist>
		<example img="vst~.png" caption="Process an audio signal with a plug-in" />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="amxd~" />
	</seealsolist>
	<discussion>
		Some plug-ins have their own editing window, which is visible when you double-click on the object. Otherwise, double-clicking on the object displays a default parameter editing window. The number of signal inputs and outputs default to 2, but the number required by the plug-in may be less than that. If you want to specify a larger number of inputs and outputs, you can supply them as optional arguments.
		<br />
		Audio plug-ins loaded into a <o>vst~</o> object can be synchronized by enabling the global transport (choose <b>GlobalTransport</b> from the Extras menu and click on the global transport's Activate button).
	</discussion>
	<misc name="Output">
		<entry name="int">
			<description>
				Out fifth-from-right outlet: Parameter values or plug-in informational values in response to the <m>get</m> message.
				<br />
				<br />
				Out fourth-from-right outlet: Raw MIDI bytes received by the plug-in (but not any MIDI messages received using the <m>midievent</m> message). Please note though that some plug-ins echo their MIDI input to their MIDI output.
			</description>
		</entry>
		<entry name="float">
			<description>
				Out fifth-from-right outlet: Parameter values or plug-in informational values in response to the <m>get</m> message.
			</description>
		</entry>
		<entry name="list">
			<description>
				Out second-from-right outlet: When a VST shell plug-in (e.g., WaveShell) is instantiated without specifying a plug-in name, a list of symbols specifying sub plug-in IDs are sent out the seventh outlet in response to the <m>printids</m> message.
			</description>
		</entry>
		<entry name="signal">
			<description>
				Out left outlet (and other signal outlets as defined by the number of outputs argument): Audio output from the plug-in. The left outlet is the left channel (or channel 1).
			</description>
		</entry>
		<entry name="symbol">
			<description>
				Out sixth-from-right outlet: The plug-in's parameters are sent out as a series of symbols in response to the <m>params</m> message.
				<br />
				Note: Some plug-ins, especially those with their own editors, fail to name the parameters.
				<br />
				<br />
				Out third-from-right outlet: A series of symbols are sent out in response to the <m>pgmnames</m> message. If there are no program names, the message <m>pgmnames: Default</m> is output.
				<br />
				<br />
				Out second-from-right outlet: When a VST shell plug-in (e.g., WaveShell) is instantiated without specifying a plug-in name, a series of symbols specifying plug-in names are sent out the seventh outlet in response to the <m>getsubnames</m> message.
				<br />
				<br />
				Out right outlet: An Audio Unit plug-in's user preset files are sent out as a series of symbols in response to the <m>presetnames</m> message.
			</description>
		</entry>
	</misc>
</c74object>
